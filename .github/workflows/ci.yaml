name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allows manual triggering

jobs:
  e2e_tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Create Docker Network
        run: |
          docker network create my_network

      - name: Build Periplus image
        id: build_periplus_image
        run: |
          docker buildx create --use
          docker buildx build --platform linux/amd64 -t periplus_image:latest -f Dockerfile --load .

      - name: Build Proxy image
        id: build_proxy_image
        run: |
          docker buildx build --platform linux/amd64 -t proxy_image:latest -f proxy.Dockerfile --load .

      - name: Run Periplus container
        run: |
          docker run -d --name periplus --network my_network -p 3000:3000 periplus_image:latest

      - name: Run Proxy container
        run: |
          docker run -d --name proxy --network my_network -p 8000:8000 proxy_image:latest

      - name: Build Test Driver image
        run: |
          docker build -t test_driver_image -f driver.Dockerfile .

      - name: Wait for Periplus to be ready
        run: |
          while ! docker run --network my_network --rm test_driver_image nc -z periplus 3000; do
            echo "Waiting for Periplus service..."
            sleep 5
          done
          echo "Periplus is up!"

      - name: Wait for Proxy to be ready
        run: |
          while ! docker run --network my_network --rm test_driver_image nc -z proxy 8000; do
            echo "Waiting for Proxy service..."
            sleep 5
          done
          echo "Proxy is up!"

      - name: Run Test Driver
        run: |
          docker run --network my_network --name test_driver_container test_driver_image || echo $? > exit_code.txt

      - name: Get Test Driver Exit Code
        id: get_test_driver_exit_code
        run: |
          if [ ! -f exit_code.txt ]; then
            docker inspect test_driver_container --format='{{.State.ExitCode}}' > exit_code.txt
          fi
          cat exit_code.txt

      - name: Archive test reports
        uses: actions/upload-artifact@v2
        with:
          name: test-reports
          path: reports/

      - name: Fail the job if tests failed
        if: failure()
        run: |
          exit_code=$(cat exit_code.txt)
          if [ "$exit_code" -ne 0 ]; then
            echo "Tests failed with exit code $exit_code"
            exit $exit_code
          fi
  unit_tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Homebrew
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl file git
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >>~/.profile
          echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >>~/.bashrc
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

      - name: Install dependencies
        run: |
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          brew install faiss curl cpr rapidjson libomp catch2 cmake

      - name: Create build directory
        run: mkdir -p build

      - name: Build the project
        run: |
          cd build
          cmake ..
          make

      - name: Run Catch2 tests
        run: |
          ./build/tests
